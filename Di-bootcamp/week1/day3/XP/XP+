student_grades = {
    "Alice": [88, 92, 100],
    "Bob": [75, 78, 80],
    "Charlie": [92, 90, 85],
    "Dana": [83, 88, 92],
    "Eli": [78, 80, 72]
}

# Create a dictionary to store the average grades for each student
student_averages = {}
# Calculate average grade for each student
# Iterate through the student_grades dictionary to calculate averages
for student, grades in student_grades.items():
    avg = sum(grades) / len(grades)
    # populate the student_averages dictionary with the calculated averages
    # add new key-value pair to the student_averages dictionary
    student_averages[student] = avg

# Assign letter grades
# Define a function to assign letter grades based on average score
def get_letter_grade(avg):
    if avg >= 90:
        return 'A'
    elif avg >= 80:
        return 'B'
    elif avg >= 70:
        return 'C'
    elif avg >= 60:
        return 'D'
    else:
        return 'F'
# Create a dictionary to store letter grades for each student
student_letter_grades = {}
# Iterate through the student_averages dictionary to assign letter grades
for student, avg in student_averages.items():
    student_letter_grades[student] = get_letter_grade(avg)

# Calculate class average
class_average = sum(student_averages.values()) / len(student_averages)
#format the class average to two decimal places
print(f"Class average: {class_average:.2f}")

# Print each student's name, average, and letter grade
for student in student_grades:
    avg = student_averages[student]
    letter = student_letter_grades[student]
    print(f"{student}: Average = {avg:.2f}, Letter Grade = {letter}")

#------------------------------------------------------------
#2
sales_data = [
    {"customer_id": 1, "product": "Smartphone", "price": 600, "quantity": 1, "date": "2023-04-03"},
    {"customer_id": 2, "product": "Laptop", "price": 1200, "quantity": 1, "date": "2023-04-04"},
    {"customer_id": 1, "product": "Laptop", "price": 1000, "quantity": 1, "date": "2023-04-05"},
    {"customer_id": 2, "product": "Smartphone", "price": 500, "quantity": 2, "date": "2023-04-06"},
    {"customer_id": 3, "product": "Headphones", "price": 150, "quantity": 4, "date": "2023-04-07"},
    {"customer_id": 3, "product": "Smartphone", "price": 550, "quantity": 1, "date": "2023-04-08"},
    {"customer_id": 1, "product": "Headphones", "price": 100, "quantity": 2, "date": "2023-04-09"},
]
# Total Sales Calculation
total_sales = {}
for transaction in sales_data:
    product = transaction["product"]
    revenue = transaction["price"] * transaction["quantity"]
    # Accumulate total sales per product using get method which initializes to 0 if product not present
    total_sales[product] = total_sales.get(product, 0) + revenue

print("Total sales per product:")
for product, sales in total_sales.items():
    print(f"{product}: ${sales}")

# Customer Spending Profile
customer_spending = {}
for transaction in sales_data:
    cid = transaction["customer_id"]
    amount = transaction["price"] * transaction["quantity"]
    customer_spending[cid] = customer_spending.get(cid, 0) + amount

print("\nTotal spent by each customer:")
for cid, spent in customer_spending.items():
    print(f"Customer {cid}: ${spent}")

# Sales Data Enhancement: Add 'total_price' to each transaction
for transaction in sales_data:
    transaction["total_price"] = transaction["price"] * transaction["quantity"]

# High-Value Transactions
high_value_transactions = [t for t in sales_data if t["total_price"] > 500]
high_value_transactions.sort(key=lambda x: x["total_price"], reverse=True)

print("\nHigh-value transactions (total_price > $500):")
for t in high_value_transactions:
    print(t)

# Customer Loyalty Identification
purchase_counts = {}
for transaction in sales_data:
    cid = transaction["customer_id"]
    purchase_counts[cid] = purchase_counts.get(cid, 0) + 1

loyal_customers = [cid for cid, count in purchase_counts.items() if count > 1]
print("\nLoyal customers (more than one purchase):", loyal_customers)

# Bonus: Insights and Analysis

# Average transaction value per product
product_totals = {}
product_counts = {}
for t in sales_data:
    product = t["product"]
    product_totals[product] = product_totals.get(product, 0) + t["total_price"]
    product_counts[product] = product_counts.get(product, 0) + 1

print("\nAverage transaction value per product:")
for product in product_totals:
    avg = product_totals[product] / product_counts[product]
    print(f"{product}: ${avg:.2f}")

# Most popular product by quantity sold
product_quantity = {}
for t in sales_data:
    product = t["product"]
    product_quantity[product] = product_quantity.get(product, 0) + t["quantity"]

most_popular = max(product_quantity, key=product_quantity.get)
print(f"\nMost popular product by quantity sold: {most_popular} ({product_quantity[most_popular]} units)")

# Insights
print("\nInsights:")
print("- High-value transactions are mostly from laptops and smartphones, suggesting premium products drive revenue.")
print("- Loyal customers (multiple purchases) can be targeted for loyalty programs or special offers.")
print("- The most popular product can be promoted further or bundled with accessories to increase sales.")